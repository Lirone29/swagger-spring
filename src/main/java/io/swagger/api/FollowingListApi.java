/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.FollowingList;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-04-08T08:21:17.323Z[GMT]")
@Validated
public interface FollowingListApi {

    @Operation(summary = "Add a user to Following List", description = "Adding single user to user's Following List", security = {
        @SecurityRequirement(name = "pileOfBook_auth", scopes = {
            "write:books",
"read:books"        })    }, tags={ "followingList" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "405", description = "Invalid input") })
    @RequestMapping(value = "/followingList/{userId}/{otherUserId}",
        method = RequestMethod.POST)
    ResponseEntity<Void> addUserToFollowingList(@Parameter(in = ParameterIn.PATH, description = "ID of user who wannts to add other to Following List", required=true, schema=@Schema()) @PathVariable("userId") Long userId, @Parameter(in = ParameterIn.PATH, description = "ID of other user that is being added to Following List", required=true, schema=@Schema()) @PathVariable("otherUserId") Long otherUserId);


    @Operation(summary = "Deletes a user from Following List", description = "", security = {
        @SecurityRequirement(name = "pileOfBook_auth", scopes = {
            "write:books",
"read:books"        })    }, tags={ "followingList" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "User not found") })
    @RequestMapping(value = "/followingList/{userId}/{otherUserId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUserFromFollowingList(@Parameter(in = ParameterIn.PATH, description = "User id to be deleted from Following List", required=true, schema=@Schema()) @PathVariable("otherUserId") Long otherUserId, @Parameter(in = ParameterIn.PATH, description = "ID of user that wants to delete user from Favorite List", required=true, schema=@Schema()) @PathVariable("userId") Long userId, @Parameter(in = ParameterIn.HEADER, description = "" ,schema=@Schema()) @RequestHeader(value="api_key", required=false) String apiKey);


    @Operation(summary = "Get all users in the following list", description = "Returns all books for a user", security = {
        @SecurityRequirement(name = "api_key")    }, tags={ "followingList" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(schema = @Schema(implementation = FollowingList.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Following List not found") })
    @RequestMapping(value = "/followingList/{userId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<FollowingList> getUsersFromFollowingList(@Parameter(in = ParameterIn.PATH, description = "ID of user to access all followed users", required=true, schema=@Schema()) @PathVariable("userId") Long userId);

}

