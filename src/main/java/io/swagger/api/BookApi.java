/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiParam;
import io.swagger.model.Book;
import io.swagger.model.BookPath;
import io.swagger.model.Books;
import org.springframework.core.io.Resource;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-04-08T08:21:17.323Z[GMT]")
@Validated

@Api(value = "book", description = "the student API")
public interface BookApi {

    @Operation(summary = "Add a new book to the shelf", description = "", security = {
        @SecurityRequirement(name = "pileOfBook_auth", scopes = {
            "write:books",
"read:books"        })    }, tags={ "book" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation - book added", content = @Content(schema = @Schema(implementation = Book.class))),
            @ApiResponse(responseCode = "405", description = "Invalid input") })
    @RequestMapping(value = "/book",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Book> addBook(@NotNull @Parameter(in = ParameterIn.QUERY, description = "Book object" ,required=true,schema=@Schema()) Book book);



        @Operation(summary = "Deletes a book and renmove from the shelf", description = "", security = {
        @SecurityRequirement(name = "pileOfBook_auth", scopes = {
            "write:books",
"read:books"        })    }, tags={ "book" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Book not found") })
    @RequestMapping(value = "/book/{bookId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteBook(@Parameter(in = ParameterIn.PATH, description = "Book id to delete", required=true, schema=@Schema()) @PathVariable("bookId") Long bookId, @Parameter(in = ParameterIn.HEADER, description = "" ,schema=@Schema()) @RequestHeader(value="api_key", required=false) String apiKey);


    @Operation(summary = "Returns the book in the PDF format", description = "", tags={ "book" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A PDF file", content = @Content(schema = @Schema(implementation = Resource.class))) })
    @RequestMapping(value = "/book/{bookId}/download",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Resource> dwonloadBook(@Parameter(in = ParameterIn.PATH, description = "ID of book to update", required=true, schema=@Schema()) @PathVariable("bookId") Long bookId);


    @Operation(summary = "Finds books by author", description = "Multiple author values can be provided with comma separated strings", security = {
        @SecurityRequirement(name = "pileOfBook_auth", scopes = {
            "write:books",
"read:books"        })    }, tags={ "book" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Book.class)))),
        
        @ApiResponse(responseCode = "400", description = "Invalid author value") })
    @RequestMapping(value = "/book/findByAuthor/{author}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Book>> findBooksByAuthor(@Parameter(in = ParameterIn.PATH, description = "Author values that need to be considered for filter", required=true, schema=@Schema()) @PathVariable("author") String author);


    @Operation(summary = "Finds books by title", description = "Multiple title values can be provided with comma separated strings", security = {
        @SecurityRequirement(name = "pileOfBook_auth", scopes = {
            "write:books",
"read:books"        })    }, tags={ "book" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Book.class)))),
        
        @ApiResponse(responseCode = "400", description = "Invalid title value") })
    @RequestMapping(value = "/book/findByTitle/{title}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Book>> findBooksByTitle(@Parameter(in = ParameterIn.PATH, description = "Title values that need to be considered for filter", required=true, schema=@Schema()) @PathVariable("title") String title);


    @Operation(summary = "Finds books by username", description = "Multiple username values can be provided with comma separated strings", security = {
        @SecurityRequirement(name = "pileOfBook_auth", scopes = {
            "write:books",
"read:books"        })    }, tags={ "book" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Book.class)))),
        
        @ApiResponse(responseCode = "400", description = "Invalid username value") })
    @RequestMapping(value = "/book/findByUsername/{username}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Book>> findBooksByUsername(@Parameter(in = ParameterIn.PATH, description = "Username values that need to be considered for filter", required=true, schema=@Schema()) @PathVariable("username") String username);


    @Operation(summary = "Get all books", description = "", security = {
        @SecurityRequirement(name = "pileOfBook_auth", scopes = {
            "write:books",
"read:books"        })    }, tags={ "book" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Book.class)))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Book not found"),
        
        @ApiResponse(responseCode = "405", description = "Validation exception") })
    @RequestMapping(value = "/book",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Books> getAllBooks();


    @Operation(summary = "Find book by ID", description = "Returns a single book", security = {
        @SecurityRequirement(name = "api_key")    }, tags={ "book" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(schema = @Schema(implementation = Book.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Pet not found") })
    @RequestMapping(value = "/book/{bookId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Book> getBookById(@Parameter(in = ParameterIn.PATH, description = "ID of book to return", required=true, schema=@Schema()) @PathVariable("bookId") Long bookId);


    @Operation(summary = "Returns the URL to book content", description = "", tags={ "book" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A URL to read book online", content = @Content(schema = @Schema(implementation = String.class))) })
    @RequestMapping(value = "/book/{bookId}/read",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<String> readBook(@Parameter(in = ParameterIn.PATH, description = "ID of book to display", required=true, schema=@Schema()) @PathVariable("bookId") Long bookId);


    @Operation(summary = "Update an existing book", description = "", security = {
        @SecurityRequirement(name = "pileOfBook_auth", scopes = {
            "write:books",
"read:books"        })    }, tags={ "book" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation - book updated", content = @Content(schema = @Schema(implementation = Book.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Book not found"),
        
        @ApiResponse(responseCode = "405", description = "Validation exception") })
    @RequestMapping(value = "/book",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Book> updateBook(@NotNull @Parameter(in = ParameterIn.QUERY, description = "Book object" ,required=true,schema=@Schema()) Book book);
    // ResponseEntity<Book> updateBook(@NotNull @Parameter(in = ParameterIn.QUERY, description = "Book object" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "book", required = true) Book book);


    @Operation(summary = "uploads a file [.pdf/.mobi/.epub]", description = "", security = {
        @SecurityRequirement(name = "pileOfBook_auth", scopes = {
            "write:books",
"read:books"        })    }, tags={ "book" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation - book uploaded", content = @Content(schema = @Schema(implementation = Book.class))),
        
        @ApiResponse(responseCode = "404", description = "Format not valid"),
        
        @ApiResponse(responseCode = "405", description = "Validation exception") })
    @RequestMapping(value = "/book/{bookId}/uploadBook",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Book> uploadBookFile(@Parameter(in = ParameterIn.PATH, description = "ID of book to update", required=true, schema=@Schema()) @PathVariable("bookId") Long bookId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Path of book to be uploaded" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "bookPath", required = true) BookPath bookPath);

}

